package aoc;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<String> input;

    public App(List<String> input) {
        this.input = input;
    }

    public int getSolutionPart1() {

        int len = input.get(0).length();
        int[] gamma = new int[len];
        for (String s : input) {
            int[] arr = Arrays.stream(s.split("")).mapToInt(Integer::parseInt).toArray();
            for (int j = 0; j < gamma.length; j++) {
                gamma[j] += arr[j];
            }
        }

        // [0, 1, 1, 0]
        List<Character> gammaStr = new ArrayList<>();
        List<Character> epsilon = new ArrayList<>();
        for (int i : gamma) {
            if (i >= input.size() / 2) {
                gammaStr.add('1');
                epsilon.add('0');
            } else {
                epsilon.add('1');
                gammaStr.add('0');
            }
        }

        String g = gammaStr.stream()
                .map(String::valueOf)
                .collect(Collectors.joining());

        String e = epsilon.stream()
                .map(String::valueOf)
                .collect(Collectors.joining());

        int gam = Integer.parseInt(g, 2);
        int eps = Integer.parseInt(e, 2);

        return gam * eps;
    }

    public String getCandidate(List<String> input, boolean oxygen) {
        int len = input.get(0).length();
        List<String> candidates = input;

        for (int i = 0; i < len; i++) {
            double mostCommon = 0;
            for (String s : candidates) {
                mostCommon += s.charAt(i) - '0';
            }

            char common = '0';
            if (mostCommon >= candidates.size() / 2.0) {
                common = '1';
            }

            if (!oxygen) {
                if (common == '0') {
                    common = '1';
                } else {
                    common = '0';
                }
            }

            int finalI = i;
            int finalCommon = common;
            candidates = candidates.stream().filter(s -> s.charAt(finalI) == finalCommon).toList();

            if (candidates.size() == 1) {
                return candidates.get(0);
            }
        }
        throw new IllegalArgumentException("no candidate");
    }

    public int getSolutionPart2() {

        String oxy = getCandidate(input, true);
        String co = getCandidate(input, false);

        int gam = Integer.parseInt(oxy, 2);
        int eps = Integer.parseInt(co, 2);

        return gam * eps;
    }

    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}